import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { getEnvironments } from './environmentsApi';
import  {IEnvironmentMetaData} from "@kevin-infra/core/interfaces"

export interface EnvironmentsState {
  environments: Array<IEnvironmentMetaData>,
  status: 'idle' | 'loading' | 'failed';
}

const initialState: EnvironmentsState = {
  environments: [],
  status: "idle"
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadEnvironments = createAsyncThunk<Array<IEnvironmentMetaData>>(
  'environments/getEnvironments',
  async (r) => {
    
    const environments = await getEnvironments();
    // The value we return becomes the `fulfilled` action payload
    return environments;
      }
);

export const environmentsSlice = createSlice({
  name: 'environments',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadEnvironments.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loadEnvironments.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log("action.payload: " + action.payload);
        state.environments = action.payload;
      })
      .addCase(loadEnvironments.rejected, (state) => {
        state.status = 'failed';
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectEnvironments = (state: RootState) => state.environments.environments;



export default environmentsSlice.reducer;
